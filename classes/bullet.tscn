[gd_scene load_steps=3 format=3 uid="uid://cbedyqmsdeuql"]

[sub_resource type="GDScript" id="GDScript_dlcs3"]
resource_name = "bullet"
script/source = "class_name Bullet
extends Node3D



var mass : float = 10.0
var effective_range : float = 50.0
var velocity : Vector3 = Vector3(1, 0, 0)
var dist_travelled : float = 0.0



func _physics_process(delta):
	
	if Multiplayermanager.mp_active and !is_multiplayer_authority():
		global_translate(velocity * delta)
		velocity += WorldState.get_gravity_vector() * delta
		
		# Remove ourself if necessary
		if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
			queue_free()
		return
	
	
	var _time = delta
	var _target_pos = global_position + (velocity * _time)
	var _space = get_world_3d().direct_space_state
	var _ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
	var _raycast = _space.intersect_ray(_ray)
	
	# For every collision
	while !_raycast.is_empty():
		
		# Get information about the collision
		var _body = _raycast.collider
		var _shape = _body.shape_owner_get_owner(_body.shape_find_owner(_raycast.shape))
		var _point = _raycast.position
		var _normal = _raycast.normal
		var _travelled = global_position.distance_to(_point)
		
		var _passed = _travelled / velocity.length()
		_time -= _passed
		
		# Update ourself
		velocity += WorldState.get_gravity_vector() * _passed
		dist_travelled += _travelled
		global_position = _point
		
		# Remove ourself if necessary
		if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
			queue_free()
			return
		if dist_travelled > 2 * effective_range:
			queue_free()
			return
		
		# Actual collision handling
		if \"strength\" in _shape:
			effective_range -= _shape.strength
		if \"player\" in _shape:
			var _player = _shape.player
			_player.rpc_id(int(str(_player.name)), \"damage\", min(mass * (1 - ((dist_travelled - effective_range) / effective_range)), mass))
		
		# Move through the surface so we don't collide with it again
		global_translate(_normal * -0.01)
		
		
		# Try to move again
		_target_pos = global_position + (velocity * _time)
		_space = get_world_3d().direct_space_state
		_ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
		_raycast = _space.intersect_ray(_ray)
	
	
	# Update ourself
	velocity += WorldState.get_gravity_vector() * _time
	dist_travelled += global_position.distance_to(_target_pos)
	global_position = _target_pos
	
	
	# Remove ourself if necessary
	if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
		queue_free()
		return
	if dist_travelled > 2 * effective_range:
		queue_free()
		return
"

[sub_resource type="SphereMesh" id="SphereMesh_diy8k"]
radius = 0.03
height = 2.0
radial_segments = 16
is_hemisphere = true

[node name="bullet" type="Node3D"]
top_level = true
script = SubResource("GDScript_dlcs3")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(-1, 8.74228e-08, -3.82137e-15, 0, -4.37114e-08, -1, -8.74228e-08, -1, 4.37114e-08, 0, 0, 0.688387)
mesh = SubResource("SphereMesh_diy8k")
