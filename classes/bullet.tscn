[gd_scene load_steps=4 format=3 uid="uid://cbedyqmsdeuql"]

[sub_resource type="GDScript" id="GDScript_dlcs3"]
resource_name = "bullet"
script/source = "class_name Bullet
extends Node3D



var mass : float = 10.0
var aeroLoss : float = 1

var velocity : Vector3 = Vector3(1, 0, 0)
var acceleration : Vector3 = Vector3.ZERO



func _physics_process(delta):
	
	if velocity.length() < 25:
		queue_free()
		get_parent().remove_child(self)
		return
	
	if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
		queue_free()
		return
	
	if Multiplayermanager.mp_active and !is_multiplayer_authority():
		global_translate(velocity * delta)
		velocity += WorldState.get_gravity_vector() * delta
		velocity += acceleration * delta
		velocity -= velocity * aeroLoss * 2 * delta
		return
	
	
	var _time = delta
	var _target_pos = global_position + (velocity * _time)
	var _space = get_world_3d().direct_space_state
	var _ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
	var _raycast = _space.intersect_ray(_ray)
	
	# For every collision
	while !_raycast.is_empty():
		
		# Get information about the collision
		var _body = _raycast.collider
		var _shape = _body.shape_owner_get_owner(_body.shape_find_owner(_raycast.shape))
		var _point = _raycast.position
		var _normal = _raycast.normal
		var _travelled = global_position.distance_to(_point)
		
		# Update ourselves
		global_position = _point
		if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
			queue_free()
			return
		
		var _passed = _travelled / velocity.length()
		_time -= _passed
		
		# Apply forces
		velocity += WorldState.get_gravity_vector() * _passed
		velocity += acceleration * _passed
		velocity -= velocity * aeroLoss * 2 * _passed
		
		# Actual collision handling
		if \"strength\" in _shape:
			if _surface_hit(_shape, _normal, _time):
				queue_free()
				get_parent().remove_child(self)
				return
		
		if \"player\" in _shape:
			if _player_hit(_shape.player):
				queue_free()
				get_parent().remove_child(self)
				return
		
		# Move through the surface so we don't collide with it again
		global_translate(_normal * -0.01)
		
		
		# Try to move again
		_target_pos = global_position + (velocity * _time)
		_space = get_world_3d().direct_space_state
		_ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
		_raycast = _space.intersect_ray(_ray)
	
	# Move to our final position
	global_position = _target_pos
	
	# Apply forces
	velocity += WorldState.get_gravity_vector() * _time
	velocity += acceleration * _time
	velocity -= velocity * aeroLoss * 2 * _time



func _surface_hit(_collider, _normal, _time) -> bool:
	
	var _angle = acos(velocity.normalized().dot(_normal))
	var _speed = velocity.length() / 45
	
	# Stopping
	if _collider.strength > _speed:
		return true
	
	# Slowing
	velocity *= (20 - _collider.strength) / 20
	
	# Deforming
	aeroLoss *= _collider.strength
	
	# Fragmenting and deflection
	if _speed / _angle < 5:
		var _p_scene = preload(\"res://classes/bullet.tscn\")
		
		velocity = velocity.bounce(_normal)
		
		# Create new bullets
		var fragments = randi_range(2, 8)
		for i in range(fragments):
			var _bullet = _p_scene.instantiate()
			add_sibling(_bullet, true)
			
			# Setting up each bullet
			_bullet.global_position = global_position + (velocity.normalized() * 0.01)
			_bullet.mass = mass / fragments
			_bullet.aeroLoss = randf() / 10
			_bullet.velocity = (velocity * 0.75) + Vector3(randf() - randf(), randf() - randf(), randf() - randf()) * velocity.length() * 0.2
			
			_bullet._physics_process(_time)
			
		return true
	else:
		return false



func _player_hit(player):
	var damage = mass * (min(velocity.length() / 400, 1))
	player.rpc_id(int(str(player.name)), \"damage\", damage)
"

[sub_resource type="SphereMesh" id="SphereMesh_diy8k"]
radius = 0.1
height = 0.2

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_bl7mr"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1

[node name="bullet" type="Node3D"]
top_level = true
script = SubResource("GDScript_dlcs3")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("SphereMesh_diy8k")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_bl7mr")
