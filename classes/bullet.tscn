[gd_scene load_steps=3 format=3 uid="uid://cbedyqmsdeuql"]

[sub_resource type="GDScript" id="GDScript_dlcs3"]
resource_name = "bullet"
script/source = "class_name Bullet
extends Node3D



var mass : float = 10.0
var aeroLoss : float = 0.01

var velocity : Vector3 = Vector3(1, 0, 0)
var acceleration : Vector3 = Vector3.ZERO

var player : Node3D



func _physics_process(delta):
	
	var _time = delta
	
	var _target_pos = global_position + (velocity * _time)
	
	var _space = get_world_3d().direct_space_state
	var _ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
	var _raycast = _space.intersect_ray(_ray)
	
	while !_raycast.is_empty():
		print(\"collision\")
		# Handle collision
		var _body = _raycast.collider
		var _shape = _body.shape_owner_get_owner(_body.shape_find_owner(_raycast.shape))
		var _point = _raycast.position
		var _normal = _raycast.normal
		var _travelled = global_position.distance_to(_point)
		
		global_position = _point
		_time -= _travelled / velocity.length()
		
		
		if \"strength\" in _shape:
			_surface_hit(_shape, _normal, _time)
		
		if \"player\" in _shape:
			_player_hit()
		
		global_translate(_normal * -0.01)
		
		
		# Try to move again
		_target_pos = global_position + (velocity * _time)
		_space = get_world_3d().direct_space_state
		_ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
		_raycast = _space.intersect_ray(_ray)
	
	global_position = _target_pos
	
	# Apply other forces
	velocity += WorldState.get_gravity_vector() * delta
	velocity += acceleration * delta
	velocity *= 1 - aeroLoss * WorldState.air_pressure
	if velocity.length() < 10 or global_position.length_squared() > 1000:
		queue_free()



func _surface_hit(_collider, _normal, _time):
	
	# Deflection
	var _ref_angle = acos(velocity.normalized().dot(_normal))
	var _speed = velocity.length() / 100
	#var _angle = clamp(_collider.strength - _ref_angle - _speed, 0, 1) * _ref_angle * 2
	#velocity = velocity.rotated(velocity.cross(_normal).normalized(), _angle)
	
	# Slowing
	velocity *= (15 - _collider.strength) / 15
	
	# Deforming
	aeroLoss *= _collider.strength * 2
	
	# Fragmenting
	var _fragments : int = (_collider.strength + _speed) / (5 - _ref_angle)
	if _fragments > 1:
		print(_fragments)
		var _p_scene = preload(\"res://classes/bullet.tscn\")
		
		# Create X new bullets
		for i in range(_fragments):
			var _bullet = _p_scene.instantiate()
			get_parent().add_child(_bullet)
			
			# Setting up each bullet
			_bullet.global_position = global_position + (velocity.normalized() * 0.01)
			_bullet.mass = mass / _fragments
			_bullet.aeroLoss = randf() / 10
			_bullet.velocity = (velocity * 0.75) + Vector3(randf() - randf(), randf() - randf(), randf() - randf()) * velocity.length() * 0.25
			
			_bullet._physics_process(_time)
		
		queue_free()



func _player_hit():
	pass
"

[sub_resource type="SphereMesh" id="SphereMesh_diy8k"]
radius = 0.1
height = 0.2

[node name="bullet" type="Node3D"]
script = SubResource("GDScript_dlcs3")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0)
mesh = SubResource("SphereMesh_diy8k")
