[gd_scene load_steps=4 format=3 uid="uid://cbedyqmsdeuql"]

[sub_resource type="GDScript" id="GDScript_dlcs3"]
resource_name = "bullet"
script/source = "class_name Bullet
extends Node3D



var mass : float = 10.0
var piercing : float = 0.0
var tearing : float = 5.0
var tagging : float = 0.1
var effective_range : float = 50.0

var velocity : Vector3 = Vector3(1, 0, 0)

var dist_travelled : float = 0.0
var frame_count := 0

var team := 0

@onready var mesh := $MeshInstance3D



func _physics_process(delta):
	
	var _time = delta
	var _target_pos = global_position + (velocity * _time)
	var _space = get_world_3d().direct_space_state
	var _ray = PhysicsRayQueryParameters3D.create(global_position, _target_pos)
	var _raycast = _space.intersect_ray(_ray)
	
	# For every collision
	while !_raycast.is_empty():
		
		# Get information about the collision
		var _body = _raycast.collider
		var _shape = _body.shape_owner_get_owner(_body.shape_find_owner(_raycast.shape))
		var _point = _raycast.position
		var _normal = _raycast.normal
		var _travelled = global_position.distance_to(_point)
		
		var _passed = _travelled / velocity.length()
		_time -= _passed
		
		# Update ourself
		#velocity += Gamemanager.get_gravity_vector() * _passed
		dist_travelled += _travelled
		global_position = _point
		
		# Remove ourself if necessary
		if Gamemanager.playable_area and !Gamemanager.playable_area.has_point(global_position):
			queue_free()
			return
		if dist_travelled > 2 * effective_range:
			queue_free()
			return
		
		
		if \"player\" in _shape:
			
			if \"health\" in _shape.player:
				var _player = _shape.player
				
				#if _shape.damage == 2:
				#	Audiomanager.play(\"res://assets/bullet_headshot.mp3\")
				#else:
				#	Audiomanager.play(\"res://assets/bullet_hit.mp3\")
				
				if Gamemanager.mp_active and is_multiplayer_authority():
					var multiplier = clamp(1 - ((dist_travelled - effective_range) / effective_range), 0, 1)
					if _shape.area == 1:
						multiplier *= 2
					if _shape.area == 2:
						multiplier *= 0.66
					if _player.armor:
						multiplier *= max(_player.armor.protection[_shape.area] - piercing)
					_player.damage(mass * multiplier * _shape.damage, tearing * multiplier * min(_shape.damage, 1), tagging * multiplier, _shape.damage == 2)
				
				var blood = preload(\"res://classes/blood spray.tscn\").instantiate()
				Gamemanager.add_child(blood)
				blood.global_position = global_position
				if blood.global_basis.y.cross(-velocity).is_zero_approx():
					blood.rotate(global_basis.x, acos(blood.global_basis.y.dot(-velocity.normalized())))
				else:
					blood.rotate(blood.global_basis.y.cross(-velocity).normalized(), acos(blood.global_basis.y.dot(-velocity.normalized())))
				
				queue_free()
				return
			
			elif \"fuse_time\" in _shape.player:
				if Gamemanager.mp_active and is_multiplayer_authority():
					_shape.player.destroy.rpc()
				elif !Gamemanager.mp_active:
					_shape.player.destroy()
				
				queue_free()
				return
		
		else:
			var impact = preload(\"res://classes/bullet impact.tscn\").instantiate()
			Gamemanager.add_child(impact)
			impact.global_position = global_position
			if impact.global_basis.y.cross(_normal).is_zero_approx():
				impact.rotate(global_basis.x, acos(impact.global_basis.y.dot(_normal)))
			else:
				impact.rotate(impact.global_basis.y.cross(_normal).normalized(), acos(impact.global_basis.y.dot(_normal)))
			
			var smoke = preload(\"res://classes/smoke.tscn\").instantiate()
			smoke.size = Vector3(0.2, 0.2, 0.2)
			smoke.fade_speed = 0.15
			smoke.start_density = 0.005
			Gamemanager.add_child(smoke)
			smoke.global_position = global_position + _normal * 0.5
			
			queue_free()
			return
	
	
	# Update ourself
	#velocity += Gamemanager.get_gravity_vector() * _time
	dist_travelled += global_position.distance_to(_target_pos)
	global_position = _target_pos
	
	
	# Remove ourself if necessary
	if Gamemanager.playable_area and !Gamemanager.playable_area.has_point(global_position):
		queue_free()
		return
	if dist_travelled > 2 * effective_range:
		queue_free()
		return
"

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_m7s0v"]
albedo_color = Color(0.368627, 0.368627, 0.368627, 1)
emission_enabled = true
emission = Color(0.945098, 0.721569, 0.309804, 1)

[sub_resource type="SphereMesh" id="SphereMesh_diy8k"]
material = SubResource("StandardMaterial3D_m7s0v")
radius = 0.015
height = 3.0
radial_segments = 16

[node name="bullet" type="Node3D"]
top_level = true
script = SubResource("GDScript_dlcs3")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(-1, 8.74228e-08, -3.82137e-15, 0, -4.37114e-08, -1, -8.74228e-08, -1, 4.37114e-08, 0, 0, -2.20007)
cast_shadow = 0
mesh = SubResource("SphereMesh_diy8k")
