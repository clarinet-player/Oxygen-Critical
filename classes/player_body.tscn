[gd_scene load_steps=4 format=3 uid="uid://bve504yaouv3p"]

[ext_resource type="PackedScene" uid="uid://cskrtkkrkyd4q" path="res://assets/AK12/ak_12.tscn" id="1_cnjq7"]

[sub_resource type="GDScript" id="GDScript_n1bfo"]
script/source = "class_name PlayerBody
extends RigidBody3D



@export var walk_acceleration : float = 30.0
@export var walk_friction : float = 40.0
@export var walk_max_speed : float = 3

@export var sprint_acceleration : float = 40.0
@export var sprint_max_speed : float = 6

@export var slide_power : float = 2.0
@export var slide_friction : float = 1.0

@export var jump_power : float = 2.0

@export var mouse_sensitivity : float = 3.0

var _mouse_position : Vector2

var _anchored_shape : CollisionShape3D
var _anchor_point_l : Vector3
var _surface_normal : Vector3

var _velocity_2d : Vector2
var _velocity_3d : Vector3

var _jump_stamina : float = 1.0
var _slide_stamina : float = 1.0

enum move_type {
	IDLE,
	WALKING,
	SPRINTING,
	SLIDING
}

var _movement_state : move_type = move_type.WALKING



func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	_mouse_position = get_viewport().get_mouse_position()
	_velocity_3d = Vector3(0, -10, 0)



func _input(event):
	
	# Rotating to follow mouse
	if event is InputEventMouseMotion:
		if _anchored_shape:
			
			rotate(_surface_normal, event.relative.x * mouse_sensitivity * -0.001)
			rotate(global_transform.basis.x.normalized(), event.relative.y * mouse_sensitivity * -0.001)
			_velocity_2d = _velocity_2d.rotated(event.relative.x * mouse_sensitivity * 0.001)
			
		else:
			rotate(global_transform.basis.y.normalized(), event.relative.x * mouse_sensitivity * -0.001)
			rotate(global_transform.basis.x.normalized(), event.relative.y * mouse_sensitivity * -0.001)



############    Executed every physics frame    ############



func _physics_process(delta : float):
	
	# Regen stamina
	_jump_stamina = clamp(_jump_stamina + delta, 0, 1)
	_slide_stamina = clamp(_slide_stamina + delta, 0, 1)
	
	
	if _anchored_shape:
		
		# Move to follow our anchor
		global_position = _anchored_shape.to_global(_anchor_point_l)
		
		
		# Rotate to follow our anchor
		var _body = _anchored_shape.get_parent()
		if !_body.angular_velocity.is_zero_approx():
			rotate(_body.angular_velocity.normalized(), _body.angular_velocity.length() * delta)
		
		
		# Jumping
		if Input.is_action_pressed(\"Space\") and _jump_stamina > 0.3:
			detach()
			_velocity_3d += _surface_normal * _jump_stamina
			_velocity_3d += global_transform.basis.z * -1 * jump_power * _jump_stamina
			_jump_stamina = 0
	
	
	# Delegate movement
	if _anchored_shape:
		_anchored_move(delta)
	else:
		_free_move(delta)



func _anchored_move(delta : float):
	
	# Modifying Movement State
	if Input.is_action_pressed(\"Control\"):
		if _movement_state != move_type.SLIDING:
			_movement_state = move_type.SLIDING
			_velocity_2d.y += slide_power * _slide_stamina
			_slide_stamina = 0
	elif _movement_state == move_type.SLIDING:
		_movement_state = move_type.IDLE
	
	if Input.is_action_pressed(\"W\") or Input.is_action_pressed(\"A\") or Input.is_action_pressed(\"S\") or Input.is_action_pressed(\"D\"):
		if _movement_state == move_type.IDLE:
			_movement_state = move_type.WALKING
	elif _movement_state != move_type.SLIDING:
		_movement_state = move_type.IDLE
	
	if Input.is_action_pressed(\"Shift\") and _movement_state == move_type.WALKING:
		_movement_state = move_type.SPRINTING
	
	
	# Calculating movement direction along the ground
	var _looking : Vector3 = global_transform.basis.z * -1
	var _forward : Vector3 = (_looking - _looking.dot(_surface_normal) * _surface_normal).normalized()
	var _side : Vector3 = _forward.cross(_surface_normal)
	
	
	# Getting movement input
	match _movement_state:
		
		move_type.IDLE:
			
			if _velocity_2d.length() < walk_friction * delta:
				_velocity_2d = Vector2.ZERO
			else:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
		
		move_type.WALKING:
			
			var _change : Vector2
			_change.y = Input.get_axis(\"S\", \"W\")
			_change.x = Input.get_axis(\"A\", \"D\")
			
			_velocity_2d += _change.normalized() * delta * walk_acceleration
			
			if _velocity_2d.length() > walk_max_speed + walk_friction * delta:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
			else:
				_velocity_2d = _velocity_2d.limit_length(walk_max_speed)
		
		move_type.SPRINTING:
			
			var _change : Vector2
			_change.y = Input.get_axis(\"S\", \"W\")
			_change.x = Input.get_axis(\"A\", \"D\")
			
			_velocity_2d += _change.normalized() * delta * sprint_acceleration
			
			if _velocity_2d.length() > sprint_max_speed + walk_friction * delta:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
			else:
				_velocity_2d = _velocity_2d.limit_length(sprint_max_speed)
		
		move_type.SLIDING:
			
			_velocity_2d.y += _forward.dot(WorldState.get_gravity_vector()) * delta
			_velocity_2d.x += _side.dot(WorldState.get_gravity_vector()) * delta
			
			if _velocity_2d.length() < slide_friction * delta:
				_velocity_2d = Vector2.ZERO
			else:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - slide_friction * delta)
	
	
	# Applying movement
	var _movement : Vector3 = (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
	var _time = delta
	var _collision = move_and_collide(_movement * _time)
	var _loops = 0
	
	while _collision:
		
		var _shape = _collision.get_collider_shape()
		var _normal = _collision.get_normal()
		_time -= delta * (_collision.get_travel().length() / _velocity_2d.length())
		
		
		if _shape == _anchored_shape and acos(_surface_normal.dot(_normal)) <= 1.5:
			
			_surface_normal = _normal
			
			_looking = global_transform.basis.z * -1
			_forward = _looking - _looking.dot(_surface_normal) * _surface_normal
			_side = _forward.cross(_surface_normal)
			
			_movement = (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
			
			if _loops > 2: # prevents the player getting stuck inside geometry
				global_translate(_surface_normal)
				print(\"stuck in geometry\")
			
		else:
			
			_movement = _movement - _movement.dot(_normal) * _normal
			_velocity_2d = Vector2(_movement.dot(_side), _movement.dot(_forward))
			
		_loops += 1
		_collision = move_and_collide(_movement * _time)
	
	
	# Checking we're still on the ground
	_collision = move_and_collide(_surface_normal * -10 * delta)
	
	if _collision and _collision.get_collider_shape() == _anchored_shape:
		_anchor_point_l = _anchored_shape.to_local(self.global_position)
		_surface_normal = _collision.get_normal()
	else:
		detach()



func _free_move(delta : float):
	
	# Apply gravity, if any
	_velocity_3d += WorldState.get_gravity_vector() * delta
	
	# Apply air resistance
	#_velocity_3d *= (400 - WorldState.air_pressure) / 400
	
	# Try to move to our new position
	var _collision = move_and_collide(_velocity_3d * delta)
	while _collision:
		
		var _shape = _collision.get_collider_shape()
		var _normal = _collision.get_normal()
		
		if _shape.get_is_grabbable():
			
			attach(_shape, global_position, _normal)
			_anchored_move(_collision.get_remainder().length()/_velocity_3d.length())
			return
		
		_collision = move_and_collide(_collision.get_remainder().bounce(_normal) * 0.5)
		_velocity_3d = _velocity_3d.bounce(_normal) * 0.5



############################################################



func attach(_shape : CollisionShape3D, _anchor_point_g : Vector3, _normal : Vector3):
	
	_anchored_shape = _shape
	_anchor_point_l = _anchored_shape.to_local(_anchor_point_g)
	_surface_normal = _normal
	
	var _looking : Vector3 = global_transform.basis.z * -1
	var _forward : Vector3 = _looking - _looking.dot(_surface_normal) * _surface_normal
	var _side : Vector3 = _forward.cross(_surface_normal)
	
	_velocity_2d = Vector2(_velocity_3d.dot(_side), _velocity_3d.dot(_forward))



func detach():
	
	var _looking : Vector3 = global_transform.basis.z * -1
	var _forward : Vector3 = _looking - _looking.dot(_surface_normal) * _surface_normal
	var _side : Vector3 = _forward.cross(_surface_normal)
	
	var _body : RigidBody3D = _anchored_shape.get_parent()
	
	_velocity_3d = _body.linear_velocity 
	_velocity_3d += (_body.global_position - global_position).cross(_body.angular_velocity)
	_velocity_3d += (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
	
	_anchored_shape = null
"

[sub_resource type="SphereShape3D" id="SphereShape3D_g30ov"]
radius = 1.0

[node name="player_body" type="RigidBody3D"]
can_sleep = false
lock_rotation = true
freeze = true
custom_integrator = true
script = SubResource("GDScript_n1bfo")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_g30ov")

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.9, 0)
fov = 80.0

[node name="ak12" parent="." instance=ExtResource("1_cnjq7")]
transform = Transform3D(-0.278488, 0.826811, -0.488701, 0.948965, 0.158459, -0.272681, -0.148017, -0.539699, -0.828744, 0.281315, 0.750673, -0.188785)
