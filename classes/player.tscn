[gd_scene load_steps=7 format=3 uid="uid://bq3u0xb10re6"]

[sub_resource type="GDScript" id="GDScript_qj47s"]
script/source = "extends RigidBody3D



signal death(id : int)



#region Variables
var walk_acceleration : float = 25.0
var walk_friction : float = 35.0
var walk_max_speed : float = 3

var sprint_acceleration : float = 35.0
var sprint_max_speed : float = 6
var slide_friction : float = 1.0

var jump_power : float = 3.0

var mouse_sensitivity : float = 1.0

var _anchored_shape : CollisionShape3D
var _anchor_point_l : Vector3
var _surface_normal : Vector3

@export var _velocity_2d : Vector2
@export var _velocity_3d : Vector3

var _up_vec := Vector3(0, 0.1, 0)
var _height := 1.0
var _reorient := true

enum move_type {
	IDLE,
	WALKING,
	SPRINTING,
	SLIDING
}

var _movement_state : move_type = move_type.IDLE

var health : float = 100
var breached := false

var inventory := Array()
var active_item : Node3D



@onready var camera := $Camera3D
@onready var hitbox := $Hitbox
@onready var hud = UiManager.playerhud
#endregion



func _enter_tree():
	if name != \"Player\":
		set_multiplayer_authority(int(str(name)))



func _ready():
	
	if !Multiplayermanager.mp_active or is_multiplayer_authority():
		$Camera3D.current = true
		UiManager.set_ui(3)
		
		var spawnpoint = WorldState.find_spawnpoint()
		
		if spawnpoint:
			global_position = spawnpoint.global_position
			_velocity_3d = spawnpoint.down * 10
		
			var _axis = spawnpoint.down.cross(global_basis.y * -1)
			var _angle = acos(spawnpoint.down.dot(global_basis.y * -1))
			
			if !_axis.is_zero_approx():
				rotate(_axis.normalized(), _angle)
			else:
				rotate(global_basis.x, _angle)
		
		var ak = preload(\"res://weapons/ak12/ak12.tscn\").instantiate()
		inventory.append(ak)
		var vector = preload(\"res://weapons/vector/vector.tscn\").instantiate()
		inventory.append(vector)
		var glock = preload(\"res://weapons/glock/glock.tscn\").instantiate()
		inventory.append(glock)
	
	hud.set_health(100)
	hud.set_ammo(false, 0)



func _input(event):
	if Multiplayermanager.mp_active and !is_multiplayer_authority():
		return
	
	if UiManager.paused:
		return
	
	# Rotating to follow mouse
	if event is InputEventMouseMotion:
		if _anchored_shape and _reorient:
			
			rotate(_surface_normal, event.relative.x * mouse_sensitivity * -0.001)
			rotate(global_transform.basis.x.normalized(), event.relative.y * mouse_sensitivity * -0.001)
			
		else:
			rotate(global_transform.basis.y.normalized(), event.relative.x * mouse_sensitivity * -0.001)
			rotate(global_transform.basis.x.normalized(), event.relative.y * mouse_sensitivity * -0.001)
		
		_velocity_2d = _velocity_2d.rotated(event.relative.x * mouse_sensitivity * 0.001)



func _process(delta):
	if Multiplayermanager.mp_active and !is_multiplayer_authority():
		return
	
	if breached:
		health -= 10 * delta
	if WorldState.playable_area and !WorldState.playable_area.has_point(global_position):
		health -= 100 * delta
	hud.set_health(health)
	if health <= 0.1:
		die.rpc()
	
	# update anchor gui
	if _anchored_shape:
		if _reorient:
			hud.set_hud_anchor(true, 0)
		elif acos(_surface_normal.dot(global_basis.x)) < PI / 2:
			hud.set_hud_anchor(true, acos(_surface_normal.dot(global_basis.y)))
		else:
			hud.set_hud_anchor(true, acos(_surface_normal.dot(-global_basis.y)) + PI)
	else:
		hud.set_hud_anchor(false)
	
	
	if Input.is_action_just_pressed(\"1\") and inventory.size() > 0 and inventory[0] != active_item:
		if active_item:
			camera.remove_child(active_item)
		active_item = inventory[0]
		camera.add_child(active_item)
	
	if Input.is_action_just_pressed(\"2\") and inventory.size() > 1 and inventory[1] != active_item:
		if active_item:
			camera.remove_child(active_item)
		active_item = inventory[1]
		camera.add_child(active_item)
	
	if Input.is_action_just_pressed(\"3\") and inventory.size() > 2 and inventory[2] != active_item:
		if active_item:
			camera.remove_child(active_item)
		active_item = inventory[2]
		camera.add_child(active_item)
	
	if Input.is_action_just_pressed(\"4\")and inventory.size() > 3 and inventory[3] != active_item:
		if active_item:
			camera.remove_child(active_item)
		active_item = inventory[3]
		camera.add_child(active_item)



#region Physics Frame
func _physics_process(delta : float):
	if Multiplayermanager.mp_active and !is_multiplayer_authority():
		return
	
	if _anchored_shape:
		
		# Modifying Movement State
		if Input.is_action_pressed(\"Control\"):
			_height = 0.6
			if _movement_state != move_type.SLIDING:
				_movement_state = move_type.SLIDING
		else:
			_reorient = true
			if _movement_state == move_type.SLIDING:
				_height = 1.0
				_movement_state = move_type.IDLE
			
		if (Input.is_action_pressed(\"W\") or Input.is_action_pressed(\"A\") or Input.is_action_pressed(\"S\") or Input.is_action_pressed(\"D\")) and !UiManager.paused:
			if _movement_state == move_type.IDLE:
				_movement_state = move_type.WALKING
		elif _movement_state != move_type.SLIDING:
			_movement_state = move_type.IDLE
		
		if Input.is_action_pressed(\"Shift\") and _movement_state == move_type.WALKING:
			_movement_state = move_type.SPRINTING
		
		
		# Move to follow our anchor
		global_position = _anchored_shape.to_global(_anchor_point_l)
		var _body = _anchored_shape.get_parent()
		if !_body.angular_velocity.is_zero_approx():
			rotate(_body.angular_velocity.normalized(), _body.angular_velocity.length() * delta)
		
		
		# Adjust roll to avoid gimbal lock
		if _reorient:
			var _roll : Vector3 = global_transform.basis.z
			var _up : Vector3 = global_transform.basis.y
			var _adjusted_normal : Vector3 = (_surface_normal - _surface_normal.dot(_roll) * _roll).normalized()
			var _roll_angle : float = acos(_up.dot(_adjusted_normal))
			var _axis = _up.cross(_adjusted_normal)
			
			if !_axis.is_zero_approx():
				rotate(_axis.normalized(), _roll_angle * 7 * delta)
		
		
		# Jumping
		if Input.is_action_just_pressed(\"Space\"):
			
			detach()
			_reorient = false
			_velocity_3d += -global_basis.z * jump_power
	
	
	if _anchored_shape:
		_up_vec = lerp(_up_vec, _surface_normal, delta * 8).limit_length(_height)
	else:
		_up_vec = lerp(_up_vec, -_velocity_3d, delta * 8).limit_length(_height)
	
	var collision = move_and_collide((camera.global_position - _up_vec) - global_position)
	if collision and !_anchored_shape:
		attach(collision.get_collider_shape(), global_position, collision.get_normal())
	camera.global_position = global_position + _up_vec
	hitbox.global_position = global_position + _up_vec * 0.35
	
	var _up : Vector3 = hitbox.global_basis.y
	var _angle : float = acos(_up.dot(_up_vec))
	var _axis = _up.cross(_up_vec)
	
	if !_axis.is_zero_approx():
		hitbox.global_rotate(_axis.normalized(), _angle)
	
	
	# Delegate movement
	if _anchored_shape:
		_anchored_move(delta)
	else:
		_free_move(delta)



func _anchored_move(delta : float):
	
	# Calculating movement direction along the ground
	var _forward : Vector3 = (-global_basis.z + global_basis.z.dot(_surface_normal) * _surface_normal).normalized()
	var _side : Vector3 = (global_basis.x - global_basis.x.dot(_surface_normal) * _surface_normal).normalized()
	
	var _input := Input.get_vector(\"A\", \"D\", \"S\", \"W\")
	
	# Getting movement input
	match _movement_state:
		
		move_type.IDLE:
			
			if _velocity_2d.length() < walk_friction * delta:
				_velocity_2d = Vector2.ZERO
			else:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
		
		move_type.WALKING:
			
			_velocity_2d += _input * delta * walk_acceleration
			if _velocity_2d.length() > walk_max_speed + walk_friction * delta:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
			else:
				_velocity_2d = _velocity_2d.limit_length(walk_max_speed)
		
		move_type.SPRINTING:
			
			_velocity_2d += _input * delta * sprint_acceleration
			if _velocity_2d.length() > sprint_max_speed + walk_friction * delta:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - walk_friction * delta)
			else:
				_velocity_2d = _velocity_2d.limit_length(sprint_max_speed)
		
		move_type.SLIDING:
			
			#_velocity_2d.y += _forward.dot(WorldState.get_gravity_vector()) * delta
			#_velocity_2d.x += _side.dot(WorldState.get_gravity_vector()) * delta
			if _velocity_2d.length() < slide_friction * delta:
				_velocity_2d = Vector2.ZERO
			else:
				_velocity_2d = _velocity_2d.limit_length(_velocity_2d.length() - slide_friction * delta)
	
	
	if _velocity_2d.is_zero_approx():
		return
	
	# Applying movement
	var _movement : Vector3 = (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
	var _time = delta
	var _collision = move_and_collide(_movement * _time)
	var _loops = 0
	
	while _collision:
		
		var _shape = _collision.get_collider_shape()
		var _normal = _collision.get_normal()
		
		_time -= delta * (_collision.get_travel().length() / _velocity_2d.length())
		
		if _shape == _anchored_shape and acos(_surface_normal.dot(_normal)) <= 1.5:
			
			_surface_normal = _normal
			_forward = (-global_basis.z + global_basis.z.dot(_surface_normal) * _surface_normal).normalized()
			_side = (global_basis.x - global_basis.x.dot(_surface_normal) * _surface_normal).normalized()
			_movement = (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
		
		
		else:
			_movement = _movement - _movement.dot(_normal) * _normal
			#_velocity_2d = Vector2(_movement.dot(_side), _movement.dot(_forward))
		
		
		if _loops > 2:
			global_translate(_surface_normal)
		if _loops > 4:
			break
		
		_loops += 1
		_collision = move_and_collide(_movement * _time)
	
	
	# Checking we're still on the ground
	_collision = move_and_collide(_surface_normal * -100 * delta)
	
	if _collision and _collision.get_collider_shape() == _anchored_shape:
		_anchor_point_l = _anchored_shape.to_local(self.global_position)
		_surface_normal = _collision.get_normal()
	else:
		detach()



func _free_move(delta : float):
	
	# Apply gravity, if any
	_velocity_3d += WorldState.get_gravity_vector() * delta
	
	# Try to move to our new position
	var _collision = move_and_collide(_velocity_3d * delta)
	var _loops = 0
	
	while _collision:
		
		var _shape = _collision.get_collider_shape()
		var _normal = _collision.get_normal()
		
		if \"get_is_grabbable\" in _shape and _shape.get_is_grabbable():
			attach(_shape, global_position, _normal)
			_anchored_move(_collision.get_remainder().length()/_velocity_3d.length())
			return
		
		if _loops > 2: # prevents getting stuck in geometry
			global_translate(_normal)
		
		_collision = move_and_collide(_collision.get_remainder().bounce(_normal) * 0.5)
		_velocity_3d = _velocity_3d.bounce(_normal) * 0.5
		
		var _body = _shape.get_parent()
		_velocity_3d += ((_body.global_position - global_position).cross(_body.angular_velocity) - _velocity_3d) * 0.5
		
		_loops += 1
#endregion



func attach(_shape : CollisionShape3D, _anchor_point_g : Vector3, _normal : Vector3):
	
	_anchored_shape = _shape
	_anchor_point_l = _anchored_shape.to_local(_anchor_point_g)
	_surface_normal = _normal
	
	var _forward : Vector3 = (-global_basis.z + global_basis.z.dot(_surface_normal) * _surface_normal).normalized()
	var _side : Vector3 = (global_basis.x - global_basis.x.dot(_surface_normal) * _surface_normal).normalized()
	
	_velocity_2d = Vector2(_velocity_3d.dot(_side), _velocity_3d.dot(_forward))
	
	var _body = _shape.get_parent()
	var _body_motion = (_body.global_position - global_position).cross(_body.angular_velocity)
	_velocity_2d -= Vector2(_body_motion.dot(_side), _body_motion.dot(_forward))



func detach():
	
	var _forward : Vector3 = (-global_basis.z + global_basis.z.dot(_surface_normal) * _surface_normal).normalized()
	var _side : Vector3 = (global_basis.x - global_basis.x.dot(_surface_normal) * _surface_normal).normalized()
	
	var _body : RigidBody3D = _anchored_shape.get_parent()
	
	#_velocity_3d = _body.linear_velocity 
	_velocity_3d = (_body.global_position - global_position).cross(_body.angular_velocity)
	_velocity_3d += (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
	
	_anchored_shape = null
	
	_movement_state = move_type.IDLE



func is_anchored() -> bool:
	if _anchored_shape:
		return true
	else:
		return false



func get_velocity() -> Vector3:
	if _anchored_shape:
		var _forward : Vector3 = (-global_basis.z + global_basis.z.dot(_surface_normal) * _surface_normal).normalized()
		var _side : Vector3 = (global_basis.x - global_basis.x.dot(_surface_normal) * _surface_normal).normalized()
		
		return (_forward * _velocity_2d.y) + ( _side * _velocity_2d.x)
		
	else:
		return _velocity_3d



@rpc(\"authority\", \"call_local\", \"reliable\")
func heal_breach():
	breached = false



@rpc(\"authority\", \"call_local\", \"reliable\")
func heal_health():
	health = min(health + 26, 100)
	hud.set_health(health)



@rpc(\"any_peer\", \"call_remote\", \"reliable\")
func damage(amount : float):
	if multiplayer.get_remote_sender_id() == 1:
		health = clamp(health - amount, 0, 100)
		breached = true



@rpc(\"authority\", \"call_local\", \"reliable\")
func die():
	death.emit(int(str(name)))
	queue_free()
	if is_multiplayer_authority():
		UiManager.set_ui(0)
"

[sub_resource type="SphereShape3D" id="SphereShape3D_ufnhc"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_ham1v"]
radius = 0.3
height = 1.6

[sub_resource type="GDScript" id="GDScript_tf0av"]
script/source = "extends CollisionShape3D

@onready var player = $\"../..\"
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_r400h"]
radius = 0.3
height = 1.6

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_0uupb"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath(".:rotation")
properties/1/spawn = true
properties/1/replication_mode = 1
properties/2/path = NodePath("Hitbox:position")
properties/2/spawn = true
properties/2/replication_mode = 1
properties/3/path = NodePath("Hitbox:rotation")
properties/3/spawn = true
properties/3/replication_mode = 1
properties/4/path = NodePath("Camera3D:position")
properties/4/spawn = true
properties/4/replication_mode = 1
properties/5/path = NodePath("Camera3D:rotation")
properties/5/spawn = true
properties/5/replication_mode = 1

[node name="Player" type="RigidBody3D" groups=["Players"]]
top_level = true
collision_layer = 0
can_sleep = false
freeze = true
script = SubResource("GDScript_qj47s")

[node name="PlayerBody" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_ufnhc")

[node name="Camera3D" type="Camera3D" parent="."]

[node name="Hitbox" type="RigidBody3D" parent="."]
collision_layer = 2
collision_mask = 0
can_sleep = false
freeze = true

[node name="CollisionShape3D" type="CollisionShape3D" parent="Hitbox"]
shape = SubResource("CapsuleShape3D_ham1v")
script = SubResource("GDScript_tf0av")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Hitbox"]
mesh = SubResource("CapsuleMesh_r400h")
skeleton = NodePath("../../PlayerBody")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://weapons/ak12/ak12.tscn", "res://weapons/vector/vector.tscn", "res://weapons/glock/glock.tscn")
spawn_path = NodePath("../Camera3D")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_0uupb")

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
