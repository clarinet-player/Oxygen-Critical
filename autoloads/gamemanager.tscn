[gd_scene load_steps=2 format=3 uid="uid://bm81c21drbsb4"]

[sub_resource type="GDScript" id="GDScript_w478l"]
script/source = "extends Node

var peer = ENetMultiplayerPeer.new()
var local_player
var freecam
var mp_active = false

var players := Array()
var game_running := false
var round_running := false

# Gravity states: zero, thrust, spin
var gravity_state : String = \"zero\"
var gravity_strength : float = 9.8
var playable_area : AABB
var bombsite : AABB



func _ready():
	
	# Server setup
	if DisplayServer.get_name() == \"headless\":
		
		mp_active = true
		sync_level(1)
		
		await get_tree().create_timer(0.1).timeout
		
		multiplayer.peer_connected.connect(_on_connect)
		multiplayer.peer_disconnected.connect(_on_disconnect)
		
		peer.create_server(7777)
		multiplayer.multiplayer_peer = peer



#region Multiplayer
func connect_player():
	peer.close()
	peer.create_client(\"66.179.249.44\", 7777)
	multiplayer.multiplayer_peer = peer
	mp_active = true

func cancel_connect():
	peer.close()
	mp_active = false

func disconnect_player():
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()



func _on_connect(id : int):
	print(\"player connected: \", id)
	
	sync_level.rpc_id(id, 1)
	await get_tree().create_timer(0.1).timeout
	
	if players.size() >= 2 and !game_running:
		print(\"starting game loop\")
		_game_loop()
	elif !game_running:
		Gamemanager.ui_message.rpc(0)
	else:
		Gamemanager.ui_message.rpc_id(id, 4)

func _on_disconnect(id):
	if get_node_or_null(str(id)):
		get_node(str(id)).die.rpc()
	players.erase(id)
#endregion


func spawn_player(id : int):
	var new_player = preload(\"res://classes/player.tscn\").instantiate()
	new_player.name = str(id)
	
	add_child(new_player)
	
	await get_tree().create_timer(0.1).timeout
	
	var team1 := 0
	var team2 := 0
	for player in get_tree().get_nodes_in_group(\"Players\"):
		if player.team == 1:
			team1 += 1
		elif player.team == 2:
			team2 += 1
	if team1 > team2:
		new_player.set_team.rpc(2)
	else:
		new_player.set_team.rpc(1)




func _game_loop():
	game_running = true
	while game_running:
		
		# Start of round
		print(\"round start\")
		# Spawn players
		for player in players:
			spawn_player(player)
		
		
		round_running = true
		while round_running:
			await get_tree().create_timer(0.1).timeout
			
			if players.size() < 2:
				round_running = false
				ui_message.rpc(0)
			
			var team1 := true
			var team2 := true
			for player in get_tree().get_nodes_in_group(\"Players\"):
				if player.team == 1:
					team1 = false
				elif player.team == 2:
					team2 = false
			if team1:
				round_running = false
				Gamemanager.ui_message.rpc(2)
			elif team2 and !get_node_or_null(\"Bomb\"):
				round_running = false
				ui_message.rpc(1)
		
		
		reset.rpc()
		
		await get_tree().create_timer(2.5).timeout
		
		if players.size() < 2:
			game_running = false



func get_gravity_vector() -> Vector3:
	if gravity_state == \"thrust\":
		return Vector3(0, gravity_strength * -1, 0)
	else:
		return Vector3.ZERO



func find_spawnpoint(exclude, player_team):
	var best_point
	var best_value := 0.0
	
	var players = get_tree().get_nodes_in_group(\"Players\")
	players.erase(exclude)
	var spawnpoints = get_tree().get_nodes_in_group(\"Spawnpoints\")
	
	
	for point in spawnpoints:
		var value := 0.0
		
		if player_team != 0 and point.team != player_team:
			continue
		
		for player in players:
			value += point.global_position.distance_to(player.global_position)
		if players.size() < 1:
			value = randf()
		if value > best_value:
			best_value = value
			best_point = point
	
	return best_point



@rpc(\"any_peer\", \"call_remote\", \"unreliable\")
func timeout():
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()
	get_tree().change_scene_to_file(\"res://scenes/Empty scene.tscn\")
	UiManager.set_ui(1)



@rpc(\"authority\", \"call_remote\", \"reliable\")
func sync_level(level : int):
	
	if level == 1:
		get_tree().change_scene_to_file(\"res://scenes/somnambulist.tscn\")
	
	await get_tree().create_timer(0.1).timeout
	if UiManager.active_menu != UiManager.spechud:
		UiManager.set_ui(0)



@rpc(\"authority\", \"call_remote\", \"reliable\")
func ui_message(ui : int):
	UiManager.set_ui(6)
	UiManager.spechud.set_message(ui)



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func throw_grenade(type : int, position : Vector3, velocity : Vector3):
	if type == 1:
		var grenade : RigidBody3D = preload(\"res://weapons/grenades/he_grenade.tscn\").instantiate()
		
		add_child(grenade)
		grenade.global_position = position
		grenade.apply_impulse(velocity)



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func plant_bomb(pos : Vector3):
	var bomb = preload(\"res://weapons/bomb/bomb.tscn\").instantiate()
	add_child(bomb)
	bomb.global_position = pos



@rpc(\"authority\", \"call_local\", \"reliable\")
func reset():
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)

"

[node name="GameManager" type="Node"]
script = SubResource("GDScript_w478l")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://classes/player.tscn", "res://classes/bullet.tscn")
spawn_path = NodePath("..")

[connection signal="spawned" from="MultiplayerSpawner" to="." method="_on_multiplayer_spawner_spawned"]
