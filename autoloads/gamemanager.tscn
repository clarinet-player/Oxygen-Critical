[gd_scene load_steps=2 format=3 uid="uid://bcl6wucmqp8of"]

[sub_resource type="GDScript" id="GDScript_w478l"]
script/source = "extends Node



var peer = ENetMultiplayerPeer.new()
var local_player
var freecam
var mp_active = false

var username := \"\"

var players := Array()
var game_running := false
var round_running := false

var gravity := Vector3.ZERO
var playable_area : AABB
var objectives : Array
var time_bonuses : Array
var bombs : Array

var round_start_time := -1
var c_spawns := 0
var t_spawns := 0



func _ready():
	
	# Server setup
	if DisplayServer.get_name() == \"headless\":
		
		mp_active = true
		sync_level(1)
		
		await get_tree().create_timer(0.1).timeout
		
		multiplayer.peer_connected.connect(_on_connect)
		multiplayer.peer_disconnected.connect(_on_disconnect)
		
		peer.create_server(7777)
		multiplayer.multiplayer_peer = peer



#region Multiplayer
func connect_player():
	peer.close()
	peer.create_client(\"66.179.249.44\", 7777)
	multiplayer.multiplayer_peer = peer
	mp_active = true

func cancel_connect():
	peer.close()
	mp_active = false

func disconnect_player():
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()



func _on_connect(id : int):
	print(\"player connected: \", id)
	
	# Syncing other players
	for player in players:
		if player[2] != null:
			player[2].set_team.rpc_id(id, player[1])
	
	
	# Assigning player a team
	var team1 := 0
	var team2 := 0
	for player in players:
		if player[1] == 1:
			team1 += 1
		elif player[1] == 2:
			team2 += 1
	if team1 > team2:
		players.append([id, 2, null, Time.get_ticks_msec()])
	else:
		players.append([id, 1, null, Time.get_ticks_msec()])
	
	
	sync_level.rpc_id(id, 1)
	
	if round_running:
		sync_scoreboard.rpc_id(id, Time.get_ticks_msec() - round_start_time, c_spawns, t_spawns)
	elif players.size() >= 2 and !game_running:
		_game_loop()
	elif !game_running:
		ui_message.rpc(0)
	else:
		ui_message.rpc_id(id, 4)

func _on_disconnect(id):
	print(\"player disconnected: \", id)
	if get_node_or_null(str(id)):
		get_node(str(id)).die.rpc()
	
	for player in players:
		if player[0] == id:
			players.erase(player)
#endregion



func spawn_player(player):
	var new_player = preload(\"res://classes/player.tscn\").instantiate()
	new_player.name = str(player[0])
	add_child(new_player)
	new_player.death.connect(on_death)
	player[2] = new_player
	await get_tree().create_timer(0.1).timeout
	new_player.set_team.rpc(player[1])



func _game_loop():
	game_running = true
	while game_running:
		
		print(\"Round start.\")
		round_start_time = Time.get_ticks_msec()
		c_spawns = 2
		t_spawns = 2
		sync_scoreboard.rpc(0, 2, 2)
		
		for player in players:
			spawn_player(player)
		
		
		round_running = true
		while round_running:
			await get_tree().create_timer(0.1).timeout
			
			# Respawn players
			for player in players:
				if player[2] == null and player[1] == 1 and c_spawns > 0 and Time.get_ticks_msec() - player[3] > 4000:
					c_spawns -= 1
					spawn_player(player)
					sync_scoreboard.rpc(Time.get_ticks_msec() - round_start_time, c_spawns, t_spawns)
				
				elif player[2] == null and player[1] == 2 and t_spawns > 0 and Time.get_ticks_msec() - player[3] > 4000:
					t_spawns -= 1
					spawn_player(player)
					sync_scoreboard.rpc(Time.get_ticks_msec() - round_start_time, c_spawns, t_spawns)
			
			
			# Out of time
			if Time.get_ticks_msec() - round_start_time > 120000:
				ui_message.rpc(1)
				print(\"Round end. Out of time.\")
				round_running = false
				break
			
			# Bombsites destroyed
			var objectives_complete := 0
			for obj in objectives:
				if obj[2] == 2:
					objectives_complete += 1
			if objectives_complete > objectives.size() / 2:
				ui_message.rpc(2)
				print(\"Round end. Bombs detonated.\")
				round_running = false
				break
			
			# Team eliminated
			var team1 := true
			var team2 := true
			for player in players:
				if player[1] == 1 and player[2] != null:
					team1 = false
				elif player[1] == 2 and player[2] != null:
					team2 = false
			if team2 and bombs.is_empty() and t_spawns < 1:
				ui_message.rpc(1)
				print(\"Round end. Ts eliminated.\")
				round_running = false
				break
			elif team1 and c_spawns < 1:
				ui_message.rpc(2)
				print(\"Round end. CTs eliminated.\")
				round_running = false
				break
			
			team1 = true
			team2 = true
			for player in players:
				if player[1] == 1:
					team1 = false
				elif player[1] == 2:
					team2 = false
			if team2:
				ui_message.rpc(1)
				print(\"Round end. Ts disconnected.\")
				round_running = false
				break
			elif team1:
				ui_message.rpc(2)
				print(\"Round end. CTs disconnected.\")
				round_running = false
				break
		
		
		await get_tree().create_timer(5.0).timeout
		reset.rpc()
		await get_tree().create_timer(0.5).timeout
		
		if players.size() < 2:
			game_running = false
			ui_message.rpc(0)



func on_death(id : int):
	for player in players:
		if player[0] == id:
			player[3] = Time.get_ticks_msec()
			return



func find_spawnpoint(exclude, player_team):
	var best_point
	var best_value := 0.0
	
	var players = get_tree().get_nodes_in_group(\"Players\")
	players.erase(exclude)
	var spawnpoints = get_tree().get_nodes_in_group(\"Spawnpoints\")
	
	
	for point in spawnpoints:
		var value := 0.0
		
		if player_team != 0 and point.team != player_team:
			continue
		
		for player in players:
			value += point.global_position.distance_to(player.global_position)
		if players.size() < 1:
			value = randf()
		if value > best_value:
			best_value = value
			best_point = point
	
	return best_point



@rpc(\"authority\", \"call_remote\", \"reliable\")
func sync_level(level : int):
	if level == 1:
		get_tree().change_scene_to_file(\"res://scenes/somnambulist 2.0.tscn\")
	
	if DisplayServer.get_name() != \"headless\":
		var cam = preload(\"res://classes/freecam.tscn\").instantiate()
		add_child(cam)
		cam.global_position = Vector3(8, 1.7, 20.7)
		freecam = cam
		UiManager.set_ui(6)



@rpc(\"authority\", \"call_remote\", \"reliable\")
func sync_scoreboard(time_elapsed : int, c : int, t : int):
	round_start_time = Time.get_ticks_msec() - time_elapsed
	c_spawns = c
	t_spawns = t



@rpc(\"authority\", \"call_remote\", \"reliable\")
func ui_message(ui : int):
	UiManager.set_ui(6)
	UiManager.spechud.set_message(ui)



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func throw_grenade(type : int, id : int, position : Vector3, velocity : Vector3):
	if type == 1:
		var grenade : RigidBody3D = preload(\"res://weapons/grenades/he_grenade.tscn\").instantiate()
		grenade.name = str(id)
		add_child(grenade)
		grenade.global_position = position
		grenade.apply_impulse(velocity)
		
	elif type == 2:
		var incendiary = preload(\"res://weapons/grenades/incendiary.tscn\").instantiate()
		incendiary.name = str(id)
		add_child(incendiary)
		incendiary.global_position = position
		incendiary.apply_impulse(velocity)
	
	elif type == 3:
		var flash = preload(\"res://weapons/grenades/flash_grenade.tscn\").instantiate()
		flash.name = str(id)
		add_child(flash)
		flash.global_position = position
		flash.apply_impulse(velocity)
	
	elif type == 4:
		var smoke = preload(\"res://weapons/grenades/smoke_grenade.tscn\").instantiate()
		smoke.name = str(id)
		add_child(smoke)
		smoke.global_position = position
		smoke.apply_impulse(velocity)
	
	elif type == 5:
		var claymore = preload(\"res://weapons/grenades/claymore.tscn\").instantiate()
		claymore.name = str(id)
		add_child(claymore)
		claymore.global_position = position
		claymore.velocity = velocity



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func spawn_fire(pos, vel):
	var fire = load(\"res://classes/fire.tscn\").instantiate()
	add_child(fire)
	fire.global_position = pos
	fire.velocity = vel



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func plant_bomb(type : int, pos : Vector3, facing : Vector3, normal : Vector3, site : int):
	var bomb
	if type == 1:
		bomb = preload(\"res://weapons/bomb/bomb.tscn\").instantiate()
	elif type == 2:
		bomb = preload(\"res://weapons/bomb/emp.tscn\").instantiate()
	add_child(bomb)
	bomb.global_position = pos
	bomb.look_at(pos + (facing - facing.dot(normal) * normal), normal)
	bomb.site = site
	bombs.append(bomb)
	
	objectives[site][2] = 1
	
	if mp_active and time_bonuses[site]:
		time_bonuses[site] = false
		round_start_time = max(Time.get_ticks_msec() - 90000, round_start_time + 10000)



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func defuse_bomb(site : int):
	for bomb in bombs:
		if bomb != null and bomb.site == site:
			bomb.defuse()
			bombs.erase(bomb)
			objectives[site][2] = 0
			break



@rpc(\"authority\", \"call_local\", \"reliable\")
func reset():
	bombs = Array()
	time_bonuses = Array()
	for obj in objectives:
		obj[2] = 0
		time_bonuses.append(true)
	
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		remove_child(child)
		child.free()



@rpc(\"any_peer\", \"call_remote\", \"reliable\")
func switch_team():
	for player in players:
		if player[0] == multiplayer.get_remote_sender_id():
			if player[1] == 1:
				player[1] = 2
			else:
				player[1] = 1
			if player[2] != null:
				player[2].die.rpc()
			break
"

[node name="GameManager" type="Node"]
script = SubResource("GDScript_w478l")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://classes/player.tscn", "res://classes/bullet.tscn")
spawn_path = NodePath("..")

[connection signal="spawned" from="MultiplayerSpawner" to="." method="_on_multiplayer_spawner_spawned"]
