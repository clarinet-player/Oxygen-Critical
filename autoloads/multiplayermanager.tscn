[gd_scene load_steps=2 format=3 uid="uid://bm81c21drbsb4"]

[sub_resource type="GDScript" id="GDScript_w478l"]
script/source = "extends Node

var peer = ENetMultiplayerPeer.new()

var _p_player = load(\"res://classes/player.tscn\")

var mp_active = false


func _ready():
	
	# Server setup
	if DisplayServer.get_name() == \"headless\":
		
		mp_active = true
		set_level(1)
		
		multiplayer.peer_connected.connect(_on_connect)
		multiplayer.peer_disconnected.connect(_on_disconnect)
		
		peer.create_server(7777)
		multiplayer.multiplayer_peer = peer
	
	# Client setup
	else:
		
		UiManager.mainmenu.connect(\"request_connect\", connect_player)
		UiManager.pausemenu.connect(\"request_disconnect\", disconnect_player)



#region connection
# Executed on the client
func connect_player():
	print(\"connecting...\")
	peer.close()
	peer.create_client(\"66.179.249.44\", 7777)
	multiplayer.multiplayer_peer = peer

func disconnect_player():
	print(\"disconnecting...\")
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()
	UiManager.set_ui(1)
	get_tree().change_scene_to_file(\"res://scenes/firing range.tscn\")



# Executed on the server
func _on_connect(id : int):
	print(\"player connected: \", id)
	
	rpc_id(id, \"connected\")
	rpc_id(id, \"set_level\", 1)
	
	await get_tree().create_timer(1.0).timeout
	
	var spawnpoint = _find_spawnpoint()
	
	var player = _p_player.instantiate()
	player.name = str(id)
	print(\"before add child\")
	add_child(player)
	print(\"after add child\")
	
	player.global_position = spawnpoint.global_position
	player._velocity_3d = spawnpoint.down * 10

func _on_disconnect(id : int):
	print(\"player disconnected: \", id)
	get_node(str(id)).queue_free()
	remove_child(get_node(str(id)))



# Executed on the client
@rpc(\"any_peer\")
func connected():
	print(\"finished connecting\")
	mp_active = true
	UiManager.set_ui(0)
#endregion



@rpc(\"authority\", \"call_remote\", \"reliable\")
func set_level(level : int):
	if level == 1:
		get_tree().change_scene_to_file(\"res://scenes/playable scene.tscn\")



func _find_spawnpoint():
	var best_point
	var best_value := 0.0
	
	var players = get_tree().get_nodes_in_group(\"Players\")
	var spawnpoints = get_tree().get_nodes_in_group(\"Spawnpoints\")
	
	if players.size() < 1:
		return spawnpoints.pick_random()
	
	for point in spawnpoints:
		var value := 0.0
		for player in players:
			value += point.global_position.distance_to(player.global_position)
		if value > best_value:
			best_value = value
			best_point = point
	
	return best_point
"

[node name="MultiplayerManager" type="Node"]
script = SubResource("GDScript_w478l")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://classes/player.tscn", "res://classes/bullet.tscn")
spawn_path = NodePath("..")
