[gd_scene load_steps=2 format=3 uid="uid://bm81c21drbsb4"]

[sub_resource type="GDScript" id="GDScript_w478l"]
script/source = "extends Node

var peer = ENetMultiplayerPeer.new()

var mp_active = false


func _ready():
	
	# Server setup
	if DisplayServer.get_name() == \"headless\":
		
		mp_active = true
		set_level(1)
		
		multiplayer.peer_connected.connect(_on_connect)
		
		peer.create_server(7777)
		multiplayer.multiplayer_peer = peer



#region connection
# Executed on the client
func connect_player():
	peer.close()
	peer.create_client(\"66.179.249.44\", 7777)
	multiplayer.multiplayer_peer = peer

func disconnect_player():
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()



# Executed on the server
func _on_connect(id : int):
	print(\"player connected: \", id)
	
	rpc_id(id, \"connected\")
	rpc_id(id, \"set_level\", 1)
	
	await get_tree().create_timer(1.0).timeout
	
	spawn_player(id)



# Executed on the client
@rpc(\"any_peer\")
func connected():
	mp_active = true
	UiManager.set_ui(0)
#endregion



func spawn_player(id : int):
	var player = preload(\"res://classes/player.tscn\").instantiate()
	player.name = str(id)
	add_child(player)
	player.death.connect(on_player_death)



func on_player_death(id : int):
	await get_tree().create_timer(3.0).timeout
	spawn_player(id)



@rpc(\"authority\", \"call_remote\", \"reliable\")
func set_level(level : int):
	if level == 1:
		get_tree().change_scene_to_file(\"res://scenes/playable scene.tscn\")



@rpc(\"any_peer\", \"call_remote\", \"unreliable\")
func timeout():
	mp_active = false
	for child in get_children():
		if child.name == \"MultiplayerSpawner\":
			continue
		child.queue_free()
		remove_child(child)
	peer.close()
	get_tree().change_scene_to_file(\"res://scenes/Empty scene.tscn\")
	UiManager.set_ui(1)
"

[node name="MultiplayerManager" type="Node"]
script = SubResource("GDScript_w478l")

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
_spawnable_scenes = PackedStringArray("res://classes/player.tscn", "res://classes/bullet.tscn")
spawn_path = NodePath("..")

[connection signal="spawned" from="MultiplayerSpawner" to="." method="_on_multiplayer_spawner_spawned"]
