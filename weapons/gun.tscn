[gd_scene load_steps=3 format=3 uid="uid://bkjd4flprwrtk"]

[ext_resource type="AudioStream" uid="uid://bvrbi4j40jude" path="res://weapons/ak12/ak_sfx_1.mp3" id="1_gew22"]

[sub_resource type="GDScript" id="GDScript_bxm1c"]
script/source = "extends Node3D



var weapon : Resource

var _mouse_down := false
var _fire_time_ms := 0
var _firedelay : float

var _heat := 0.0
var _burst := 0
var magazine : int

var reloading := false
var reload_start_time := 0



@onready var audio := $AudioStreamPlayer3D
@onready var hud = UiManager.playerhud
@onready var light = $SpotLight3D



#region entry/exit
func _enter_tree():
	set_multiplayer_authority(get_parent().get_multiplayer_authority())



func _ready():
	if !weapon:
		get_parent().remove_child(self)
	
	if !Gamemanager.mp_active or is_multiplayer_authority():
		hud.set_ammo(true, magazine)
	rotation = Vector3.ZERO
	
	Settings.settings_changed.connect(_load_settings)
	_load_settings()



func _exit_tree():
	reloading = false
	_heat = 0
	_burst = 0
	_mouse_down = false
	
	hud.stop_progress(\"reloading\")
	audio.stop()
	
	request_ready()
#endregion



func _load_settings():
	light.shadow_enabled = Settings.shadows_enabled



func _process(delta):
	if Time.get_ticks_msec() > _fire_time_ms + 35:
		light.light_energy = 0
	else:
		light.light_energy = 0.2



func _physics_process(delta):
	if Gamemanager.mp_active and !is_multiplayer_authority():
		return
	
	var time = Time.get_ticks_msec()
	
	
	# Reloading
	if Input.is_action_just_pressed(\"R\") and !reloading and !UiManager.paused:
		if magazine < weapon.mag_size and _burst == 0:
			reloading = true
			reload_start_time = time
			hud.start_progress(weapon.reload_time / 1000, \"reloading\")
	
	if reloading and time - reload_start_time > weapon.reload_time:
		reloading = false
		magazine = weapon.mag_size
		hud.set_ammo(true, magazine)
	
	
	# Trigger Input
	if Input.is_action_just_pressed(\"Mouse1\") and !UiManager.paused:
		_mouse_down = true
		if time > _fire_time_ms + _firedelay * weapon.firemode:
			_burst = weapon.firemode
	
	if !Input.is_action_pressed(\"Mouse1\") and _mouse_down:
		_mouse_down = false
	
	if weapon.firemode == 0:
		if _mouse_down and !UiManager.paused:
			_burst = 1
		else:
			_burst = 0
	
	
	# Checking for remaining ammo
	if magazine < 1 or reloading:
		_burst = 0
	
	
	# Firing
	if _burst > 0 and time > _fire_time_ms + _firedelay:
		
		var inaccuracy := 0.0
		var player = $\"../..\"
		if !player.is_anchored() or player.velocity.length() > 1:
			inaccuracy = 35
		inaccuracy = (inaccuracy + _heat) * weapon.spray / 1000
		
		if Gamemanager.mp_active:
			fire.rpc(global_position, player.get_velocity() + weapon.muzzle_vel * (-global_basis.z + (global_basis.y * inaccuracy * randf()).rotated(global_basis.z.normalized(), randf_range(0, TAU))))
		else:
			fire(global_position, player.get_velocity() + weapon.muzzle_vel * (-global_basis.z + (global_basis.y * inaccuracy * randf()).rotated(global_basis.z.normalized(), randf_range(0, TAU))))
		
		
		get_parent().rotate(basis.x.normalized(), weapon.recoil / 400)
		if !player.is_anchored() or player.velocity.length() > 1:
			rotate(basis.x.normalized(), weapon.recoil * 0.006)
		else:
			rotate(basis.x.normalized(), weapon.recoil * 0.004)
		rotate(basis.y.normalized(), weapon.jerk * _heat * (randf_range(-0.01, 0.01) - rotation.y * 0.1))
		
		_heat += 1
		_burst -= 1
		magazine -= 1
		
		hud.set_ammo(true, magazine)
	
	
	# Recovering heat after firing
	if time - _fire_time_ms > _firedelay:
		rotation = lerp(rotation, Vector3.ZERO, weapon.recovery * delta)
		
		if _heat > 0:
			_heat = max(_heat - (delta * weapon.firerate * weapon.recovery), 0)
			get_parent().rotate(basis.x.normalized(), -weapon.recoil * delta * weapon.firerate * weapon.recovery / 400)



@rpc(\"any_peer\", \"call_local\", \"reliable\")
func fire(position : Vector3, velocity : Vector3):
	audio.pitch_scale = randf_range(0.94, 1.06)
	audio.play()
	
	_fire_time_ms -= _firedelay
	if Time.get_ticks_msec() > _fire_time_ms + _firedelay:
		_fire_time_ms = Time.get_ticks_msec()
	
	var _bullet = preload(\"res://classes/bullet.tscn\").instantiate()
	add_child(_bullet)
	_bullet.global_position = position
	_bullet.velocity = velocity
	_bullet.mass = weapon.damage
	_bullet.tearing = weapon.tearing
	_bullet.effective_range = weapon.effective_range
	_bullet.owning_player = get_parent().get_parent()
	
	var _smoke = preload(\"res://classes/smoke.tscn\").instantiate()
	_smoke.size = Vector3(0.01, 0.01, 4)
	_smoke.fade_speed = 0.1
	_smoke.start_density = 0.003
	Gamemanager.add_child(_smoke)
	_smoke.global_position = light.global_position + velocity.normalized() * 3
	_smoke.look_at(light.global_position)
"

[node name="Gun" type="Node3D"]
script = SubResource("GDScript_bxm1c")

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource("1_gew22")

[node name="SpotLight3D" type="SpotLight3D" parent="."]
transform = Transform3D(0.219697, -0.967311, -0.126661, 0.975504, 0.219318, 0.0171055, 0.0112326, -0.127316, 0.991799, 0, 0, 0)
light_color = Color(1, 0.796078, 0.407843, 1)
light_energy = 0.0
light_volumetric_fog_energy = 2.0
shadow_enabled = true
shadow_bias = 0.0
shadow_blur = 2.0
spot_range = 25.0
spot_attenuation = -0.5
spot_angle = 75.0
spot_angle_attenuation = 1.8025
